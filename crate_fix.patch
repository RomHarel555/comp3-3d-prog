--- RenderWindow.cpp.original
+++ RenderWindow.cpp
@@ -3972,6 +3972,10 @@
     // Load the model using new ObjLoader class
     QString modelPath = "assets/models/CrateCube.obj";
     ObjModel model = ObjLoader::loadObj(modelPath);
+    
+    // Get memory properties once and reuse
+    VkPhysicalDeviceMemoryProperties memProperties;
+    mWindow->vulkanInstance()->functions()->vkGetPhysicalDeviceMemoryProperties(mWindow->physicalDevice(), &memProperties);
     
     if (model.vertices.isEmpty()) {
         qWarning() << "Failed to load Crate model from" << modelPath << ", using fallback geometry";
@@ -4057,7 +4061,7 @@
     allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
     allocInfo.allocationSize = memRequirements.size;
     allocInfo.memoryTypeIndex = getMemoryTypeIndex(
-        mWindow->physicalDeviceMemoryProperties(),
+        memProperties,
         memRequirements.memoryTypeBits,
         VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
     );
@@ -4101,7 +4105,7 @@
     
     allocInfo.allocationSize = memRequirements.size;
     allocInfo.memoryTypeIndex = getMemoryTypeIndex(
-        mWindow->physicalDeviceMemoryProperties(),
+        memProperties,
         memRequirements.memoryTypeBits,
         VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
     );
@@ -4152,7 +4156,7 @@
     
     allocInfo.allocationSize = memRequirements.size;
     allocInfo.memoryTypeIndex = getMemoryTypeIndex(
-        mWindow->physicalDeviceMemoryProperties(),
+        memProperties,
         memRequirements.memoryTypeBits,
         VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT
     );
@@ -4200,7 +4204,7 @@
     
     allocInfo.allocationSize = memRequirements.size;
     allocInfo.memoryTypeIndex = getMemoryTypeIndex(
-        mWindow->physicalDeviceMemoryProperties(),
+        memProperties,
         memRequirements.memoryTypeBits,
         VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT
     );
} 